.. The overview file describes the purpose of the library
   Added: August 30th, 2015
   Author: Bruno Skvorc <bruno@skvorc.me>

=============
Diffbot Class
=============

.. php:namespace:: Swader\Diffbot

.. php:class:: Diffbot

    The Diffbot class is the first instance a developer must create when using the client. It serves as a container for global settings, and as a factory for the various API endpoint classes. The Diffbot class takes a single optional argument, the ``$token``, which can be obtained `here <https://diffbot.com/pricing>`_. Instantiate like so::

        $diffbot = new Diffbot("my_token");

    Alternatively, set the token globally, and instantiate without passing in the parameter::

        Diffbot::setToken("my_token");
        $diffbot = new Diffbot();

    Note that if you instantiate without a global token set, and don't pass in a token while instantiating either, you'll get a \\DiffbotException.


:hidden:`setToken`
""""""""""""""""""

    .. php:staticmethod:: setToken($token)

        Useful for setting a default token for all future instances.

        :param string $token: The token.
        :returns: void, or throws an \\InvalidArgumentException if the token is invalid

        Usage::

            Diffbot::setToken("my_token");


:hidden:`getToken`
""""""""""""""""""

    .. php:method:: getToken()

        Returns either the instance token, or the globally defined one - or null if neither is defined

        :returns: null or string

        Usage::

            echo $diffbot->getToken(); // "my_token"


The Diffbot class is the starting point of your API usage. Whenever you use the Diffbot PHP Client, you must start with the steps above.

Next, we'll take a look at an API class.